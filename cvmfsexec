#!/bin/bash
# Mount cvmfs repository in a user namespace and change to that space.
# Requires being able to run unshare -rm and either fusermount or 
#   user namespace fuse mounts (kernel >= 4.18).
# Additional repositories can be mounted from within the command with
#   $CVMFSMOUNT and repositories can be umounted with $CVMFSUMOUNT.
# Written by Dave Dykstra September 2019

VERSION=3.2

usage()
{
    echo "Usage: cvmfsexec [-v] [repo ...] -- [command]" >&2
    echo "       -v:   print current version and exit" >&2
    exit 1
}

HERE="$(cd `dirname $0` && pwd)"

KERNEL_VERSION="$(uname -r)"
MAJORKERN=${KERNEL_VERSION/.*/}
RESTKERN=${KERNEL_VERSION#$MAJORKERN.}
MINORKERN=${RESTKERN/.*/}
REVKERN=${KERNEL_VERSION/*-/}
REVKERN=${REVKERN/.*/}
USERFUSE=false
if [ "$MAJORKERN" -gt 4 ] || [ "$MAJORKERN" -eq 4 -a "$MINORKERN" -ge 18 ]; then
    USERFUSE=true
elif [ "$MAJORKERN" -eq 3 -a "$MINORKERN" -eq 10 -a "$REVKERN" -ge 1127 ]; then
    # RHEL 7.8+ kernel
    USERFUSE=true
fi

TMPDIR=$(mktemp -d)
trap "rm -rf $TMPDIR" 0  # note that trap does not carry past exec
CMDFIFO1=$TMPDIR/cmd1
WAITFIFO1=$TMPDIR/wait1
CMDFIFO2=$TMPDIR/cmd2
WAITFIFO2=$TMPDIR/wait2
FUNCS=$TMPDIR/funcs

# create the fifos used for interprocess communication
mkfifo $CMDFIFO1 $WAITFIFO1 $CMDFIFO2 $WAITFIFO2
export CVMFSEXEC_WAITFIFO=$WAITFIFO1

# make a copy of stdin fd, for use in '&' and by unshare
exec {STDINCOPYFD}<&0

ORIGPWD=$PWD

if [ "$1" != "--" ]; then
    while getopts "v" OPTION; do
        case $OPTION in
            v)  echo "$VERSION"
                exit
                ;;
            ?)  shift $(($OPTIND-2))
                usage
                ;;
        esac
    done
    shift $(($OPTIND-1))
fi

REPOS=""
for ARG; do
    if [ "$ARG" == "--" ]; then
        break
    fi
    if [[ " $REPOS " != *" $ARG "* ]]; then
        REPOS="$REPOS $ARG"
    fi
    shift
done

if [ "$ARG" != "--" ]; then
    usage
fi
shift

# Add the config repo if not already asked for
CONFIG_REPO="`grep -h '^CVMFS_CONFIG_REPOSITORY=' $HERE/dist/etc/cvmfs/default.d/*.conf 2>/dev/null|tail -1|sed 's/^CVMFS_CONFIG_REPOSITORY=//'`"
if [[ " $REPOS " != *" $CONFIG_REPO "* ]]; then
    REPOS="$CONFIG_REPO $REPOS"
fi

MOUNTED_REPOS=""
# function to process mount/umount commands from child processes
proccmd()
{
    REPO="$2"
    RET=0
    if [ "$1" == MOUNTREPO ]; then
        if [[ " $MOUNTED_REPOS " != *" $REPO "* ]]; then
            # not already mounted
            cd "$HERE"
            ./mountrepo "$REPO"
            RET=$?
            if [ $? == 0 ]; then
                if $USERFUSE; then
                    mkdir -p "/cvmfs/$REPO"
                    mount --bind "$HERE/dist/cvmfs/$REPO" "/cvmfs/$REPO"
                    RET=$?
                fi
                # put new one at the beginning so config repo will
                #   be unmounted last
                MOUNTED_REPOS="$REPO $MOUNTED_REPOS"
            fi
            cd - >/dev/null
        fi
    elif [ "$1" == UMOUNTREPO ]; then
        if [[ " $MOUNTED_REPOS " == *" $REPO "* ]]; then
            # is mounted
            if $USERFUSE; then
                umount "/cvmfs/$REPO"
                RET=$?
                rmdir "/cvmfs/$REPO"
            fi
            if [ $? == 0 ]; then
                cd "$HERE"
                ./umountrepo "$REPO"
                RET=$?
                MOUNTED_REPOS="`echo " $MOUNTED_REPOS "|sed "s/ $REPO / /"`"
                # remove extra blanks
                MOUNTED_REPOS="`echo $MOUNTED_REPOS`"
            fi
            cd - >/dev/null
        else
            echo "$REPO not mounted" >&2
            RET=1
        fi
    else
        echo "Unrecognized command $1" >&2
        RET=1
    fi
    echo "$RET" >$CVMFSEXEC_WAITFIFO
}
# this function is needed from within unshare so write it to a file
declare -f proccmd >$FUNCS

if $USERFUSE; then
    # use a separate PID namespace to clean up fuse processes
    UNSHAREOPTS="-pf"
    # the fakeroot process will process mount requests
    CMDFIFO2=$CMDFIFO1
else
    # mount the repositories as the unprivileged user in the 
    #  shared system namespace.

    # mount the repos, keeping track of them for cleanup
    cd $HERE
    for REPO in $REPOS; do
        if ./mountrepo $REPO; then
            # put new one at the beginning so config repo will
            #   be unmounted last
            MOUNTED_REPOS="$REPO $MOUNTED_REPOS"
        else
            RET="$?"
            for REPO in $MOUNTED_REPOS; do
                ./umountrepo $REPO
            done
            exit $RET
        fi
    done
    cd $ORIGPWD

    UNSHAREOPTS="--propagation unchanged"

    (
    # This is the background process for accepting mount/umount commands
    #   from children and for cleaning up on exit
    trap "" 1 2 3 15  # ignore ordinary signals
    # read from user namespace process and write to fakeroot process
    while read -u $CMDINFD CMD PARAM; do
        proccmd "$CMD" "$PARAM"
    done <&$STDINCOPYFD {STDINCOPYFD}<&- {CMDINFD}<$CMDFIFO1
    # do unmounts and cleanup after user command exits
    cd $HERE
    for REPO in $MOUNTED_REPOS; do
        if [ "$REPO" == "$CONFIG_REPO" ]; then
            # give a little extra time for the others to exit
            sleep 1
        fi
        ./umountrepo $REPO >/dev/null
    done
    rm -rf $TMPDIR
    ) &
fi

rm -rf "$HERE/mnt"

export STDINCOPYFD

# Note that within the here document, unprotected $ substitutions are
#  done by the surrounding shell, and \$ is within the unshare shell
exec unshare -rm $UNSHAREOPTS /bin/bash /dev/stdin "${@:-$SHELL}" <<!EOF-1!
    # now in the "fakeroot" namespace
    trap "rm -rf $TMPDIR" 0 # note that this does not carry through "exec"

    mkdir -p $HERE/mnt
    mount --rbind $HERE/mnt $HERE/mnt # pivot_root requires this mountpoint
    mkdir -p $HERE/mnt/cvmfs

    # implement "underlay" for all but /cvmfs
    for ROOTFILE in /.??* /*; do
        if [ "\$ROOTFILE" == "/.??*" ] || [ "\$ROOTFILE" = "/cvmfs" ]; then
            continue
        fi
        TARG=$HERE/mnt/\$ROOTFILE
        if [ -L \$ROOTFILE ]; then
            ln -s \$(readlink -f \$ROOTFILE) \$TARG
        elif [ -d \$ROOTFILE ]; then
            mkdir -p \$TARG
            mount --rbind \$ROOTFILE \$TARG
        else
            touch \$TARG
            mount --bind \$ROOTFILE \$TARG
        fi
    done

    if $USERFUSE; then
        # Import needed functions into this shell
        HERE=$HERE  # copy a var the functions need into this shell
        . $FUNCS
    fi

    ( 
    # This is a background process for accepting commands from children
    trap "" 1 2 3 15  # ignore ordinary signals
    MOUNTED_REPOS="$REPOS"  # they'll get mounted soon
    while read -u \$CMDINFD CMD PARAM; do
        if [ "\$CMD" == PID ]; then
            # set up uid/gid map
            echo "\$(awk '{print \$2; exit}' /proc/self/gid_map) 0 1" >/proc/"\$PARAM"/gid_map
            echo "\$(awk '{print \$2; exit}' /proc/self/uid_map) 0 1" >/proc/"\$PARAM"/uid_map
            echo "ready" >$WAITFIFO2
        elif $USERFUSE; then
            proccmd "\$CMD" "\$PARAM"
        fi
    done <&$STDINCOPYFD {CMDINFD}<$CMDFIFO2
    ) &
    
    # Change to the new root.  Would use chroot but it doesn't work.
    cd $HERE/mnt
    mkdir -p .old-root
    pivot_root . .old-root
    cd $ORIGPWD

    if $USERFUSE; then
        # mount a new /proc for the new pid space
        mount -t proc proc /proc

        cd $HERE
        # mount the initial repos
        for REPO in $REPOS; do
            if ! ./mountrepo \$REPO; then
                exit $?
            fi

            mkdir -p /cvmfs/\$REPO
            mount --bind $HERE/dist/cvmfs/\$REPO /cvmfs/\$REPO
        done
        cd - >/dev/null

    else
        # map cvmfs repos mounted by parent
        mount --rbind $HERE/dist/cvmfs /cvmfs
    fi

    export CVMFSEXEC_CMDFD

    # quoting the here document's delimeter makes this nested shell not
    #  interpret $ substitutions, but the previous one still does
    exec unshare -U /bin/bash /dev/stdin "\${@:-$SHELL}" {CVMFSEXEC_CMDFD}>$CMDFIFO1 <<'!EOF-2!'
        # now in the user namespace

        export -n STDINCOPYFD
        export CVMFSMOUNT="$HERE/mountrepo"
        export CVMFSUMOUNT="$HERE/umountrepo"
        if [ "$CMDFIFO1" == "$CMDFIFO2" ]; then
            echo "PID \$$" >&\$CVMFSEXEC_CMDFD
        else
            # open & close the command fifo, so background process will exit
            echo "PID \$$" >$CMDFIFO2
        fi
        read X <$WAITFIFO2

        if [ \$$ -eq 1 ]; then
            # Leave this bash running as PID 1, because most other
            #  programs won't handle signals & child reaping correctly,
            #  and also for the cleanup trap because all other
            #  processes in the namespaces will get a SIGKILL when
            #  PID 1 exits.
            EXEC=""
            trap "rm -rf $TMPDIR" 0
            trap "" 1 2 3 15  # ignore all ordinary signals
        else
            EXEC=exec
        fi
        $EXEC "\$@" <&\$STDINCOPYFD {STDINCOPYFD}<&-
!EOF-2!

!EOF-1!

